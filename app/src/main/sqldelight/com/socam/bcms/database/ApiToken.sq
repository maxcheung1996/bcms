-- ApiToken table for managing API authentication tokens
CREATE TABLE ApiToken (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    token TEXT NOT NULL UNIQUE,
    refresh_token TEXT,
    token_type TEXT NOT NULL DEFAULT 'Bearer',
    expires_at INTEGER,
    scope TEXT,
    is_active INTEGER NOT NULL DEFAULT 1,
    created_at INTEGER NOT NULL,
    updated_at INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES User(id)
);


-- Queries for ApiToken
selectActiveTokenByUser:
SELECT * FROM ApiToken 
WHERE user_id = ? AND is_active = 1 
ORDER BY created_at DESC 
LIMIT 1;

selectTokenByValue:
SELECT * FROM ApiToken WHERE token = ? AND is_active = 1;

insertToken:
INSERT INTO ApiToken (user_id, token, refresh_token, token_type, expires_at, scope, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, strftime('%s', 'now'), strftime('%s', 'now'));

updateToken:
UPDATE ApiToken SET 
    token = ?,
    refresh_token = ?,
    expires_at = ?,
    updated_at = strftime('%s', 'now')
WHERE id = ?;

deactivateUserTokens:
UPDATE ApiToken SET 
    is_active = 0,
    updated_at = strftime('%s', 'now')
WHERE user_id = ?;

deactivateToken:
UPDATE ApiToken SET 
    is_active = 0,
    updated_at = strftime('%s', 'now')
WHERE id = ?;

cleanupExpiredTokens:
UPDATE ApiToken SET 
    is_active = 0,
    updated_at = strftime('%s', 'now')
WHERE expires_at < strftime('%s', 'now') AND is_active = 1;

